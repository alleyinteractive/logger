<?php
/**
 * Data_Structures class file.
 *
 * @package AI_Logger
 */

namespace AI_Logger;

/**
 * Post Types, Taxonomies, and other data structures.
 */
class Data_Structures {
	/**
	 * Name of the custom post type.
	 *
	 * @var string
	 */
	public const POST_TYPE = 'ai_log';

	/**
	 * Taxonomy name for log context.
	 *
	 * @var string
	 */
	public const TAXONOMY_CONTEXT = 'ai_log_context';

	/**
	 * Taxonomy name for log level.
	 *
	 * @var string
	 */
	public const TAXONOMY_LEVEL = 'ai_log_level';

	/**
	 * Constructor.
	 */
	public function __construct() {
		\add_action( 'init', [ $this, 'create_post_type' ] );
		\add_action( 'init', [ $this, 'create_taxonomy' ] );
		\add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		\add_action( 'restrict_manage_posts', [ $this, 'add_taxonomy_filters' ] );
	}

	/**
	 * Register post types.
	 */
	public function create_post_type() {
		register_post_type(
			static::POST_TYPE,
			[
				'labels'              => [
					'name'               => __( 'Logs', 'ai-logger' ),
					'singular_name'      => __( 'Log', 'ai-logger' ),
					'add_new'            => __( 'Add New Log', 'ai-logger' ),
					'add_new_item'       => __( 'Add New Log', 'ai-logger' ),
					'edit_item'          => __( 'Edit Log', 'ai-logger' ),
					'new_item'           => __( 'New Log', 'ai-logger' ),
					'view_item'          => __( 'View Log', 'ai-logger' ),
					'search_items'       => __( 'Search Logs', 'ai-logger' ),
					'not_found'          => __( 'No logs found', 'ai-logger' ),
					'not_found_in_trash' => __( 'No logs found in Trash', 'ai-logger' ),
					'parent_item_colon'  => __( 'Parent Log:', 'ai-logger' ),
					'menu_name'          => __( 'Logs', 'ai-logger' ),
				],
				'description'         => __( 'A collection of logs that are generated by the system to assist in debugging', 'ai-logger' ),
				'exclude_from_search' => true,
				'publicly_queryable'  => false,
				'show_ui'             => true,
				'show_in_nav_menus'   => false,
				'menu_icon'           => 'dashicons-warning',
				'menu_position'       => 80,
				'supports'            => [ 'title' ],
				'capabilities'        => [
					'create_posts'       => 'ai_log_create_posts',
					'edit_post'          => 'create_users',
					'read_post'          => 'create_users',
					'delete_post'        => 'create_users',
					'edit_posts'         => 'create_users',
					'edit_others_posts'  => 'create_users',
					'delete_posts'       => 'create_users',
					'publish_posts'      => 'create_users',
					'read_private_posts' => 'create_users',
				],
			]
		);
	}

	/**
	 * Register taxonomies.
	 */
	public function create_taxonomy() {
		register_taxonomy(
			static::TAXONOMY_CONTEXT,
			static::POST_TYPE,
			[
				'labels'             => [
					'name'                  => __( 'Context', 'ai-logger' ),
					'singular_name'         => __( 'Context', 'ai-logger' ),
					'search_items'          => __( 'Search Contexts', 'ai-logger' ),
					'popular_items'         => __( 'Popular Contexts', 'ai-logger' ),
					'all_items'             => __( 'All Contexts', 'ai-logger' ),
					'edit_item'             => __( 'Edit Context', 'ai-logger' ),
					'view_item'             => __( 'View Context', 'ai-logger' ),
					'update_item'           => __( 'Update Context', 'ai-logger' ),
					'add_new_item'          => __( 'Add New Context', 'ai-logger' ),
					'new_item_name'         => __( 'New Context', 'ai-logger' ),
					'add_or_remove_items'   => __( 'Add or remove Contexts', 'ai-logger' ),
					'choose_from_most_used' => __( 'Choose from most used Contexts', 'ai-logger' ),
					'menu_name'             => __( 'Contexts', 'ai-logger' ),
					'not_found'             => __( 'No levels found', 'ai-logger' ),
				],
				'public'             => false,
				'publicly_queryable' => false,
				'show_ui'            => true,
				'show_in_menu'       => true,
				'show_admin_column'  => true,
				'show_in_nav_menus'  => false,
				'show_tagcloud'      => false,
			]
		);

		register_taxonomy(
			static::TAXONOMY_LEVEL,
			static::POST_TYPE,
			[
				'labels'             => [
					'name'                  => __( 'Level', 'ai-logger' ),
					'singular_name'         => __( 'Level', 'ai-logger' ),
					'search_items'          => __( 'Search Levels', 'ai-logger' ),
					'popular_items'         => __( 'Popular Levels', 'ai-logger' ),
					'all_items'             => __( 'All Levels', 'ai-logger' ),
					'edit_item'             => __( 'Edit Level', 'ai-logger' ),
					'view_item'             => __( 'View Level', 'ai-logger' ),
					'update_item'           => __( 'Update Level', 'ai-logger' ),
					'add_new_item'          => __( 'Add New Level', 'ai-logger' ),
					'new_item_name'         => __( 'New Level', 'ai-logger' ),
					'add_or_remove_items'   => __( 'Add or remove Levels', 'ai-logger' ),
					'choose_from_most_used' => __( 'Choose from most used Levels', 'ai-logger' ),
					'menu_name'             => __( 'Levels', 'ai-logger' ),
					'not_found'             => __( 'No levels found', 'ai-logger' ),
				],
				'public'             => false,
				'publicly_queryable' => is_admin(),
				'show_admin_column'  => true,
				'show_in_nav_menus'  => false,
				'show_tagcloud'      => false,
			]
		);
	}

	/**
	 * Add log display meta box.
	 *
	 * @param string $post_type Post type.
	 */
	public function add_meta_boxes( $post_type ) {
		if ( static::POST_TYPE !== $post_type ) {
			return;
		}

		\add_meta_box(
			'ai-logger-log-display',
			__( 'Log Details', 'ai-logger' ),
			[ $this, 'render_meta_box' ],
			$post_type,
			'normal',
			'high'
		);

		// Remove the 'publish' meta box.
		remove_meta_box( 'submitdiv', static::POST_TYPE, 'side' );
	}

	/**
	 * Render the log display meta box.
	 *
	 * @param \WP_Post $post Post object.
	 */
	public function render_meta_box( $post ) {
		$log = \get_post_meta( $post->ID, '_logger_record', true );

		if ( empty( $log ) ) {
			return;
		}

		include AI_LOGGER_PATH . '/template-parts/log-display.php'; // phpcs:ignore WordPressVIPMinimum.Files.IncludingFile.UsingCustomConstant
	}

	/**
	 * Add taxonomy filters to allow the user to filter by context/level.
	 *
	 * @param string $post_type Current post type.
	 */
	public function add_taxonomy_filters( $post_type = '' ) {
		if ( static::POST_TYPE !== $post_type ) {
			return;
		}

		$this->taxonomy_dropdown( static::TAXONOMY_CONTEXT );
		$this->taxonomy_dropdown( static::TAXONOMY_LEVEL );
	}

	/**
	 * Render the taxonomy dropdown for a given taxonomy.
	 *
	 * @param string $taxonomy Taxonomy name.
	 */
	protected function taxonomy_dropdown( string $taxonomy ) {
		$taxonomy_obj = get_taxonomy( $taxonomy );

		if ( empty( $taxonomy_obj ) ) {
			return;
		}

		wp_dropdown_categories(
			[
				'show_option_all' => esc_html(
					sprintf(
						/* translators: %s: Taxonomy name. */
						__( 'Show All %s', 'ai-logger' ),
						$taxonomy_obj->label,
					),
				),
				'taxonomy'        => $taxonomy,
				'name'            => $taxonomy,
				'id'              => $taxonomy,
				'hierarchical'    => true,
				'selected'        => get_query_var( $taxonomy ),
				'value_field'     => 'slug',
				'show_count'      => false,
				'hide_empty'      => false,
			]
		);
	}
}
